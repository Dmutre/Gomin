generator client {
  provider = "prisma-client-js"
  output   = "../../../node_modules/@prisma/client/users"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_USERS")
}

model User {
  id                  String      @id @default(uuid())
  email               String      @unique
  username            String      @unique
  firstName           String      @map("first_name")
  lastName            String      @map("last_name")
  password            String
  bio                 String?

  createdAt           DateTime    @default(now()) @map("created_at")
  updatedAt           DateTime    @default(now()) @updatedAt @map("updated_at")

  tokens              Token[]
  sessions            Session[]
  files               File[]
  userSetting         UserSettings?

  @@map("users")
}

model UserSettings {
  id                  String      @id @default(uuid())
  user                User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              String      @map("user_id") @unique
  sessionDuration     Int         @default(30) @map("session_duration") // Session duration in days

  createdAt           DateTime    @default(now()) @map("created_at")
  updatedAt           DateTime    @default(now()) @updatedAt @map("updated_at")

  @@map("user_settings")
}


enum TokenType {
  EMAIL
  TWO_FA
  SESSION
}

model Token {
  id                  String      @id @default(uuid())
  value               String
  type                TokenType
  user                User        @relation(references: [id], fields: [userId], onDelete: Cascade)
  userId              String      @map("user_id")
  expiresAt           DateTime?

  createdAt           DateTime    @default(now()) @map("created_at")
  updatedAt           DateTime    @default(now()) @updatedAt @map("updated_at")

  session             Session?

  @@map("tokens")
}

model Session {
  id                  String      @id @default(uuid())
  deviceName          String      @map("device_name")
  token               Token?      @relation(references: [id], fields: [tokenId], onDelete: SetNull)
  tokenId             String?     @unique @map("token_id")
  user                User        @relation(references: [id], fields: [userId], onDelete: Cascade)
  userId              String      @map("user_id")
  ipAddress           String      @map("ip_address")
  userAgent           String      @map("user_agent")

  createdAt           DateTime    @default(now()) @map("created_at")
  updatedAt           DateTime    @default(now()) @updatedAt @map("updated_at")

  @@map("sessions")
}

model File {
  id                  String      @id @default(uuid())
  fileName            String      @map("file_name")
  fileExtension       String      @map("file_extension")
  fileSize            Int         @map("file_size")
  mimeType            String      @map("mime_type")
  owner               User?       @relation(references: [id], fields: [ownerId], onDelete: SetNull)
  ownerId             String?     @map("owner_id")
  storagePath         String      @unique @map("storage_path")
  bucket              String

  createdAt           DateTime    @default(now()) @map("created_at")
  updatedAt           DateTime    @default(now()) @updatedAt @map("updated_at")

  @@map("files")
}